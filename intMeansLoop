"""
Created on Tue Feb 28 13:38:38 2023

@author: Reed Bailey
"""

#import the utilities module
import utilitiesModule as um
#import matplotlib.pyplot to enable generating histogram of the data
import matplotlib.pyplot as plt






def formatStatsOutput(subsetSz, minVal, maxVal, meanVal, sDevVal):
    """
        assumes all args are positive ints
        prints a string with all the args properly formatted
        floats are rounded to two decimal places
    """
    strOutput = 'Size of each subset: ' + str(subsetSz) +\
                '\nMin: ' + f'{minVal:.2f}' +\
                '\nMax: ' + f'{maxVal:.2f}' +\
                '\nMean: ' + f'{meanVal:.2f}' +\
                '\nStd dev: ' + f'{sDevVal:.2f}'
             
    print(strOutput)


  
        
def getAllLists(subsetSizes, numVals, minVal, maxVal):
    """
        Assumes the following:
            subsetSizes is a python list of positive ints
            numVals, minVal and maxVal are positive ints
            these are the 4 args for the call to um.intMeans()
        iterates through all elements of subsetSizes
        For each element in subsetSizes gets a list of means based on this subset size
        Plots histograms if subsetSizes is 10 or 30
        Returns lists of means of the means and stdDevs of the means
            these will be needed for additional plots
    """
    #set up empty lists for all the information
    allList = []
    means = []
    mins = []
    maxs = []
    stdDevs = []
    #loop through all elements of subsetSizes list
    for size in subsetSizes:
        #get a list of means based on subset size determined by current value of size
       
        #get a list of means based on subset size determined by current value of size
        oneList = um.intMeans(numVals, size, minVal, maxVal)
        #append this to the allLists list
        allList.append(oneList)
        #get the min and max of this particular list
        oneListMin = min(oneList)
        oneListMax = max(oneList)
        #append the oneListMin and oneListMax values to the correct list
        mins.append(oneListMin)
        maxs.append(oneListMax)
        #get the mean of this particular list
        oneListMean = um.getMean(oneList)
        #append the oneListMean value to the list of means
        means.append(oneListMean)
        #get the std dev of this list
        oneListStdDev = um.stdDev(oneList)
        #append oneListStdDev to the stdDevs list
        stdDevs.append(oneListStdDev)
        #print the formatted string with all the stat info
        #call the formatStatsOutput() function
        formatStatsOutput(size, oneListMin, oneListMax, oneListMean, oneListStdDev)
       
        for size in range(subsetSizes):
            print(size, oneListMin, oneListMax, oneListMean, oneListStdDev )
        if size in [10, 30]:
            plotHist(oneList, size)
            #after exiting loop, format features of the histogram
            plt.legend()
            plt.xlabel('Numerical values')
            plt.ylabel('Number of elements in each bin')
            plt.title('Numerical Values')
            
            #return the means and stdDevs lists
            #these will be needed to make additional plots
            return means, stdDevs


def getStats(numVals, subsetSz, minVal, maxVal):
    """
    assumes all args are positive ints
    function generates list of means of the subsets and calculates the stats
    returns the following
    min mean val
    max mean val
    mean of the means
    std dev of the means
   
    """
    #get the list of means of random ints of this sibset size
    meanInts = um.intMeans(numVals, subsetSz, minVal, maxVal)
    
    #determine the smallest and largest of the means in the list
    meanMin = min(meanInts)
    meanMax = max(meanInts)
    
    #determine the mean of all the means
    mean_of_means = um.getMean(meanInts)
    
    #determine std dev of all the means
    meanStdDev = um.stdDev(meanInts)
    
    return meanInts, meanMin, meanMax, mean_of_means, meanStdDev

def plotHistograms(meanSmall, subsetSizeSmall, meansLarge, subsetSizeLarge):
    """
        assumes the two args are equally sized python lists of means
        plots both in a single histogram of histtype = step
    """
    
    #set up the number of bins of the histogram
    numBins = 10
    
    #format the legends
    strLegendSm = 'subset == ' + str(subsetSizeSmall)
    strLegendLg = 'subset == ' + str(subsetSizeLarge)
    
    #set up the figure for the histogram
    plt.figure()
    #histogram of int means with small subset size
    plt.hist(meanSmall, numBins, color = 'blue', histtype = 'step', label = strLegendSm)
    #histogram of int means with large subset size
    plt.hist(meansLarge, numBins, color = 'red', histtype = 'step', label = strLegendLg)
    #format features of the histogram
    plt.legend(loc = 'best')
    plt.xlabel('Numerical values')
    plt.ylabel('Number of elements in each bin')
    strTitle = 'Display means of subsets of a total of ' + f'{NUM_VALS:,.0f}' + ' random ints'
    plt.title(strTitle)
 
    
def plotHist(subsetSizes, oneList):
    """
        assumes subsetSizes is a positive int
        oneList is the python list to plot 
        Plots a histogram of oneList
            if subsetSz is 10 color is blue
            if subsetSz is 30 color is red
    """
    numBins = 10
    #setup a figure for the histograms
    plt.figure(1)
    plt.hist(subsetSizes, numBins, color = 'blue', histtype = 'step', label =str)
def plotStdDevs(subsetSizes, stdDevs):
    """
        assumes subsetSizes is a python list of positive ints
        assumes stdDevs is a python list of floats
        plots the line graph with subsetSizes on x axis and std devs on y axis
    """
    #set up a new figure for a line graph
    #this figure will display the standard deviation values
    plt.figure(2)
    
def plotMeans(subsetSizes, means, minVal, maxVal, randomMean):
    """
        assumes subsetSizes is a python list of positive ints
        assumes means is a python list of floats
        plots the line graph with subsetSizes on x axis and mean of means on y axis 
    """

   
    #horizontal line indicates the calculated mean of constant min and max vals
    plt.hlines(randomMean, subsetSizes[0], subsetSizes[-1], colors='k',\
               linestyles = 'solid', label = 'Random Constants Mean: ' +\
                   str(randomMean))
 
    
    #set up a new figure for another line graph
    #this figure will display the mean values
    plt.figure(3)
   

#****************** end of function defs
    
#set up constants for the random ints
NUM_VALS = 100000
MIN_VAL = 0
MAX_VAL = 101


#use range function to set up the list of subsetSizes
#must result in the list: [10, 30, 50, 70, 90]
### you must write this code
subsetSizes = list(range(10, 100, 20))

#call getALLLists() to get the lists and plot the histograms
### you must write this code

#plot the stdDevs
### you must write this code

#plot the means
### you must write this code




#ask the user the size of two subsets one small and one large
subsetSizeSmall = 10
subsetSizeLarge = 30

#get the list and stats for the small subsize
meanIntsSmall, min_small, max_small, mean_small, stdDev_small = getStats(NUM_VALS, subsetSizeSmall, MIN_VAL, MAX_VAL)

#get the lsit and stats for the large sibsize
meansIntsLarge,min_large, max_large, mean_large, stdDev_large = getStats(NUM_VALS, subsetSizeLarge, MIN_VAL, MAX_VAL)

#format and pront to console the stats
print('\n:SMALL SUBSET INFO:')
formatStatsOutput(subsetSizeSmall, min_small, max_small, mean_small, stdDev_small)

print('\nLARGE SUBSET INFO:')
formatStatsOutput(subsetSizeLarge, min_large, max_large, mean_large, stdDev_large)

#plot both histograms
plotHistograms(meanIntsSmall, subsetSizeSmall, meansIntsLarge, subsetSizeLarge)
